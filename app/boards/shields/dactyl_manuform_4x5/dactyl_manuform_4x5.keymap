#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_36keys.h"

#define BASE      0
#define LOWER     1
#define RAISE     2

#define BASEMAC   3
#define LOWERMAC  4
#define RAISEMAC  5

#define EXTRAS    6
#define NUMPAD    7
#define NUMBERS   8
#define BLUETOOTH 9
#define LANG      10


#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS_L LH2 LH1 LH0
#define THUMBS_R RH0 RH1 RH2

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <EXTRAS>;
        };
        tri_layer_mac {
            if-layers = <LOWERMAC RAISEMAC>;
            then-layer = <EXTRAS>;
        };
    };
};


#define XXX &none
#define ___ &trans

#undef COMBO_TERM
#define COMBO_TERM 40

// ZMK_COMBO(comboColon, &kp COLON, RB1 RB2, 0)
// ZMK_COMBO(comboSingleQuote, &kp SINGLE_QUOTE, RT1 RT2, 0)
// ZMK_COMBO(comboDoubleQuote, &kp DOUBLE_QUOTES,  RT2 RT3, 0)
ZMK_COMBO(comboDot,   &kp DOT, RB2 RB3, 0 1 2 3 4 5 6 7 8 9 10)
ZMK_COMBO(comboComma, &kp COMMA, RB1 RB2, 0 1 2 3 4 5 6 7 8 9 10)

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <175>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
        hold-while-undecided; \
    )

// left-hand HRMs
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS_L THUMBS_R)

// right-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS_L THUMBS_R)

&lt {
  tapping-term-ms = <280>;
  quick-tap-ms = <175>; // repeat on tap-into-hold
  flavor = "balanced";
};

&mt {
  tapping-term-ms = <280>;
  quick-tap-ms = <200>; // repeat on tap-into-hold
  flavor = "balanced";
};


// long-tap action on hold, short-tap action on all interrupts
// flavor = "tap-preferred";
// #define MT_CORE \
//     flavor = "balanced"; \
//     tapping-term-ms = <220>; \
//     quick-tap-ms = <220>; \
//     hold-trigger-key-positions = <0>;

// &mt { MT_CORE };

// ZMK_BEHAVIOR(mt_home, hold_tap, bindings = <&masked_home>, <&kp>; MT_CORE)
// ZMK_BEHAVIOR(mt_end,  hold_tap,  bindings = <&masked_end>, <&kp>; MT_CORE)

// #define NAV_LEFT  &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
// #define NAV_RIGHT &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
// #define NAV_UP    &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
// #define NAV_DOWN  &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document
// #define NAV_BSPC  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
// #define NAV_DEL   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

// mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
#define MASK_MODS(NAME, MODS, BINDING) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        bindings = <BINDING>, <BINDING>; \
        mods = <MODS>; \
    )
MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

// ----------------------------
ZMK_BEHAVIOR(lt_spc, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
    bindings = <&mo>, <&spc_morph>;
)
ZMK_BEHAVIOR(spc_morph, mod_morph,
    bindings = <&kp SPACE>, <&dot_spc>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(dot_spc, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)
// ----------------------------
// ----------------------------
ZMK_BEHAVIOR(alt_dot, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    bindings = <&kp>, <&alt_morph>;
    hold-while-undecided;
)

ZMK_BEHAVIOR(alt_morph, mod_morph,
    bindings = <&kp DOT>, <&kp COMMA>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// ----------------------------

// ----------------------------
ZMK_BEHAVIOR(alt_sqt, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    bindings = <&kp>, <&alt_morph_sqt>;
    hold-while-undecided;
)

ZMK_BEHAVIOR(alt_morph_sqt, mod_morph,
    bindings = <&kp SQT>, <&kp COMMA>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// ----------------------------

// ----------------------------
ZMK_BEHAVIOR(copy_cut, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp LC(INS)>, <&kp LC(X)>;
)

ZMK_BEHAVIOR(copy_cut_mac, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp LG(C)>, <&kp LG(X)>;
)

ZMK_BEHAVIOR(dot_comma, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp DOT>, <&kp COMMA>;
)

ZMK_BEHAVIOR(sqt_dqt, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp SQT>, <&kp DQT>;
)
// ----------------------------

ZMK_BEHAVIOR(qu_macro, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp Q>, <&kp U>;
)
ZMK_BEHAVIOR(qui_macro, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp Q>, <&kp U>, <&kp I>;
)
ZMK_BEHAVIOR(sch_macro, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp S>, <&kp C>, <&kp H>;
)


// -------------------------------------------------------------------
// Linux start
// -------------------------------------------------------------------
ZMK_LAYER(base,
  &kp R         &kp C         &kp L           &kp D         &kp K                 &kp J         &kp F         &kp O         &kp U         &kp SEMI
  &kp R         &hml LGUI S   &hml LCTRL T    &hml LSHIFT H &kp G                 &kp M         &hmr RSHIFT N &hmr RCTRL E  &hmr RGUI I   &kp A
  &kp Q         &kp W         &kp V           &lt NUMPAD B  &kp SQT               &kp COLON     &kp P         &kp X         &kp Y         &kp Z
                              &mt LALT TAB    &lt LOWER BSPC  &lt NUMBERS ESC     &lt LANG RET  &lt_spc RAISE 0  &alt_sqt RALT 0
)

ZMK_LAYER(lower,
  &tog BASEMAC  &kp K_VOL_DN  &kp K_MUTE      &kp K_VOL_UP  &kp LC(BSPC)          XXX           &kp HOME      &kp GRAVE     &kp END       XXX
  &caps_word    &kp LGUI      &kp LCTRL       &kp LSHIFT    &kp BSPC              XXX           &kp LEFT      &kp UP        &kp RIGHT     XXX
  &kp LC(Z)     &kp LC(LS(Z)) &copy_cut       &kp LS(INS)   &kp DEL               XXX           &kp PG_UP     &kp DOWN      &kp PG_DN     &kp LC(SLASH)
                              ___             ___           ___                   ___           &lt RAISE MINUS     ___
)

ZMK_LAYER(raise,
  XXX           &kp AT        &kp HASH        &kp DOLLAR    &kp PERCENT           &kp CARET     &kp AMPS      &kp LPAR      &kp RPAR      &kp ASTERISK
  &kp BACKSLASH &kp LT        &kp SLASH       &kp GT        &kp QMARK             &kp GRAVE     &kp ASTERISK  &kp LBRC      &kp RBRC      &kp PLUS
  &kp EXCL      &kp TILDE     &kp MINUS       &kp DOT       XXX                   &kp DQT       &kp PIPE      &kp LBKT      &kp RBKT      &kp EQUAL
                              ___           &lt LOWER UNDERSCORE  ___             ___           ___           ___
)
// -------------------------------------------------------------------
// Linux end
// -------------------------------------------------------------------


// -------------------------------------------------------------------
// Mac start
// -------------------------------------------------------------------
ZMK_LAYER(basemac,
  XXX           &kp C         &kp L           &kp D         &kp K                 &kp J         &kp F         &kp O         &kp U         &kp SEMI
  &kp R         &hml LGUI S   &hml LCTRL T    &hml LSHIFT H &kp G                 &kp M         &hmr RSHIFT N &hmr RCTRL E  &hmr RGUI I   &kp A
  &kp Q         &kp W         &kp V           &lt NUMPAD B  &sqt_dqt              &kp COLON     &kp P         &kp X         &kp Y         &kp Z
                              &mt LALT TAB    &lt LOWERMAC BSPC  &lt NUMBERS ESC  &lt LANG RET  &lt_spc RAISEMAC 0  &alt_dot RALT 0
)

ZMK_LAYER(lowermac,
  &kp ESC       &kp K_VOL_DN  &kp K_MUTE      &kp K_VOL_UP  &kp LG(BSPC)          XXX           &kp HOME      &kp GRAVE     &kp END       XXX
	&caps_word    &kp LGUI      &kp LCTRL       &kp LSHIFT    &kp BSPC              XXX           &kp LEFT      &kp UP        &kp RIGHT     XXX
  &kp LG(Z)     &kp LG(LS(Z)) &copy_cut_mac   &kp LG(V)     &kp DEL               XXX           &kp PG_UP     &kp DOWN      &kp PG_DN     &kp LG(SLASH)
                              ___             ___           XXX                   XXX           &lt RAISEMAC MINUS     XXX
)

ZMK_LAYER(raisemac,
  XXX           &kp AT        &kp HASH        &kp DOLLAR    &kp PERCENT           &kp CARET     &kp AMPS      &kp LPAR      &kp RPAR      &kp ASTERISK
  &kp BACKSLASH &kp LT        &kp SLASH       &kp GT        &kp QMARK             XXX           &kp ASTERISK  &kp LBRC      &kp RBRC      &kp PLUS
  &kp EXCL      &kp TILDE     &kp MINUS       &kp DOT       XXX                   XXX           &kp PIPE      &kp LBKT      &kp RBKT      &kp EQUAL
                              XXX           &lt LOWERMAC UNDERSCORE  XXX          XXX           ___           XXX
)
// -------------------------------------------------------------------
// Mac end
// -------------------------------------------------------------------

ZMK_LAYER(extras,
  XXX           XXX           &to BASE        XXX           XXX                   &kp F13       &kp F7        &kp F8        &kp F9        &kp F10
  &mo BLUETOOTH XXX           XXX             XXX           XXX                   &kp F14       &kp F4        &kp F5        &kp F6        &kp F11
  XXX           XXX           XXX             XXX           XXX                   &kp F15       &kp F1        &kp F2        &kp F3        &kp F12
                              ___             ___           ___                   ___           ___           ___
)

ZMK_LAYER(numpad,
  XXX           XXX           XXX             XXX           XXX                   &kp KP_DIVIDE   &kp KP_N7   &kp KP_N8   &kp KP_N9   &kp KP_MINUS
  XXX           XXX           XXX             XXX           XXX                   &kp KP_MULTIPLY &kp KP_N4   &kp KP_N5   &kp KP_N6   &kp KP_PLUS
  XXX           &kp CAPSLOCK  &kp KP_NUMLOCK  ___           XXX                   ___             &kp KP_N1   &kp KP_N2   &kp KP_N3   &kp EQL
                              ___             ___           ___                   ___             &kp KP_N0   &dot_comma
)

ZMK_LAYER(numbers,
  XXX           XXX           XXX             XXX           XXX                     XXX           XXX           XXX         XXX           XXX
  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3    &kp NUMBER_4  &kp NUMBER_5            &kp NUMBER_6  &kp NUMBER_7  &kp KP_N8   &kp NUMBER_9  &kp NUMBER_0
  XXX           XXX           XXX             XXX           XXX                     XXX           XXX           XXX         XXX           XXX
                              ___             ___           ___                     ___           ___           ___
)

ZMK_LAYER(bluetooth,
  &sys_reset    &bt BT_CLR    &out OUT_BLE  &out OUT_USB  &bootloader             XXX             XXX         XXX         XXX         XXX
  XXX           &bt BT_SEL 4  &bt BT_SEL 5  XXX           XXX                     XXX             XXX         XXX         XXX         XXX
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  XXX                     XXX             XXX         XXX         XXX         XXX
                              ___             ___           ___                   ___             ___           ___
)

ZMK_LAYER(lang,
  XXX           &sch_macro    XXX             XXX           XXX                   XXX           XXX           &kp RA(P)   &kp RA(Y)     XXX
  &qui_macro    &kp RA(S)     XXX             XXX           XXX                   XXX           XXX           &kp RA(L)   &kp RA(Z)     &kp RA(Q)
  &qu_macro     XXX           XXX             XXX           XXX                   XXX           XXX           XXX         XXX           &kp RA(W)
                              XXX             XXX           XXX                   XXX           XXX           XXX
)

// ZMK_LAYER(raise,
//   XXX           XXX           XXX             XXX           XXX             XXX           XXX           XXX           XXX           XXX
//   XXX           XXX           XXX             XXX           XXX             XXX           XXX           XXX           XXX           XXX
//   XXX           XXX           XXX             XXX           XXX             XXX           XXX           XXX           XXX           XXX
//                               XXX             XXX           XXX             XXX           XXX           XXX
// )