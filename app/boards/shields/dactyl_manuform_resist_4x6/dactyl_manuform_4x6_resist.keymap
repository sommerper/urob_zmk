#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_dactyl_manuform_4x6_resist.h"

#define BASE      0
#define LOWER     1
#define RAISE     2
#define EXTRAS    3
#define NUMPAD    4
#define NUMBERS   5


// left-hand keys
#define KEYS_L LN0 LN1 LN2 LN3 LN4 LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LB0 LB1
// right-hand keys
#define KEYS_R RN0 RN1 RN2 RN3 RN4 RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RB0 RB1
// left-hand thumb keys
#define THUMBS_L LH0 LH1 LH2
// right-hand thumb keys
#define THUMBS_R RH0 RH1 RH2

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <EXTRAS>;
        };
    };
};


#define XXX &none
#define ___ &trans

#undef COMBO_TERM
#define COMBO_TERM 40

ZMK_COMBO(comboColon, &kp COLON, RM1 RM2, 0)
// ZMK_COMBO(comboSingleQuote, &kp SINGLE_QUOTE, RT1 RT2, 0)
// ZMK_COMBO(comboDoubleQuote, &kp DOUBLE_QUOTES,  RT2 RT3, 0)
// ZMK_COMBO(comboReturn, &kp RET, RH3 RT4, 0)

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <175>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
        hold-while-undecided; \
    )
//global-quick-tap-ms = <150>;

// left-hand HRMs
MAKE_HRM(hml, &kp, &kp, THUMBS_L THUMBS_R KEYS_R)
// right-hand HRMs
MAKE_HRM(hmr, &kp, &kp, THUMBS_L THUMBS_R KEYS_L)

&lt {
  tapping-term-ms = <280>;
  quick-tap-ms = <175>; // repeat on tap-into-hold
  flavor = "balanced";
};

&mt {
  tapping-term-ms = <280>;
  quick-tap-ms = <200>; // repeat on tap-into-hold
  flavor = "balanced";
};

// long-tap action on hold, short-tap action on all interrupts
// flavor = "tap-preferred";
// #define MT_CORE \
//     flavor = "balanced"; \
//     tapping-term-ms = <220>; \
//     quick-tap-ms = <220>; \
//     hold-trigger-key-positions = <0>;

// &mt { MT_CORE };

// ZMK_BEHAVIOR(mt_home, hold_tap, bindings = <&masked_home>, <&kp>; MT_CORE)
// ZMK_BEHAVIOR(mt_end,  hold_tap,  bindings = <&masked_end>, <&kp>; MT_CORE)

// #define NAV_LEFT  &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
// #define NAV_RIGHT &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
// #define NAV_UP    &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
// #define NAV_DOWN  &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document
// #define NAV_BSPC  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
// #define NAV_DEL   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

// mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
#define MASK_MODS(NAME, MODS, BINDING) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        bindings = <BINDING>, <BINDING>; \
        mods = <MODS>; \
    )
MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

// ----------------------------
ZMK_BEHAVIOR(lt_spc, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
    bindings = <&mo>, <&spc_morph>;
)
ZMK_BEHAVIOR(spc_morph, mod_morph,
    bindings = <&kp SPACE>, <&dot_spc>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(dot_spc, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)

// ZMK_BEHAVIOR(tmux, macro,
//     wait-ms = <0>;
//     tap-ms = <5>;
//     bindings = <&kp LCTL &kp B>;
// )
// ----------------------------
// ----------------------------
ZMK_BEHAVIOR(alt_dot, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    bindings = <&kp>, <&alt_morph>;
    hold-while-undecided;
)
ZMK_BEHAVIOR(alt_morph, mod_morph,
    bindings = <&kp DOT>, <&kp COMMA>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// ----------------------------
// ----------------------------
ZMK_BEHAVIOR(copy_cut, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp LC(INS)>, <&kp LC(X)>;
)

ZMK_BEHAVIOR(dot_comma, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp DOT>, <&kp COMMA>;
)

ZMK_BEHAVIOR(sqt_dqt, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp SQT>, <&kp DQT>;
)
// ----------------------------



ZMK_LAYER(base,
           &kp O         &kp C         &kp L           &kp D         &kp K                                             &kp J         &kp F         &kp O         &kp U         &kp SEMI
 &kp U     &kp R         &hml LGUI S   &hml LCTRL T    &hml LSHIFT H &kp G                                             &kp M         &hmr RSHIFT N &hmr RCTRL E  &hmr RGUI I   &kp A         &kp SQT
           &kp Q         &kp W         &kp V           &lt NUMPAD B  &sqt_dqt                                          &kp COLON     &kp P         &kp X         &kp Y         &kp Z
                         &kp TILDE     &kp SLASH                                                                                                   &kp COMMA     &kp DOT
                                                       &mt LALT TAB  &lt LOWER BSPC  &lt NUMBERS ESC           &kp RET    &lt_spc RAISE 0   &alt_dot RALT 0
)

ZMK_LAYER(lower,
           &kp O         &kp C         &kp L           &kp D         &kp K                                             &kp J         &kp F         &kp O         &kp U         &kp SEMI
 &kp U     &kp R         &hml LGUI S   &hml LCTRL T    &hml LSHIFT H &kp G                                             &kp M         &hmr RSHIFT N &hmr RCTRL E  &hmr RGUI I   &kp A         &kp SQT
           &kp Q         &kp W         &kp V           &lt NUMPAD B  &sqt_dqt                                          &kp COLON     &kp P         &kp X         &kp Y         &kp Z
                         &kp TILDE     &kp SLASH                                                                                                   &kp COMMA     &kp DOT
                                                       &mt LALT TAB  &lt LOWER BSPC  &lt NUMBERS ESC           &kp RET    &lt_spc RAISE 0   &alt_dot RALT 0
)

ZMK_LAYER(raise,
           &kp O         &kp C         &kp L           &kp D         &kp K                                             &kp J         &kp F         &kp O         &kp U         &kp SEMI
 &kp U     &kp R         &hml LGUI S   &hml LCTRL T    &hml LSHIFT H &kp G                                             &kp M         &hmr RSHIFT N &hmr RCTRL E  &hmr RGUI I   &kp A         &kp SQT
           &kp Q         &kp W         &kp V           &lt NUMPAD B  &sqt_dqt                                          &kp COLON     &kp P         &kp X         &kp Y         &kp Z
                         &kp TILDE     &kp SLASH                                                                                                   &kp COMMA     &kp DOT
                                                       &mt LALT TAB  &lt LOWER BSPC  &lt NUMBERS ESC           &kp RET    &lt_spc RAISE 0   &alt_dot RALT 0
)

ZMK_LAYER(extras,
           &kp O         &kp C         &kp L           &kp D         &kp K                                             &kp J         &kp F         &kp O         &kp U         &kp SEMI
 &kp U     &kp R         &hml LGUI S   &hml LCTRL T    &hml LSHIFT H &kp G                                             &kp M         &hmr RSHIFT N &hmr RCTRL E  &hmr RGUI I   &kp A         &kp SQT
           &kp Q         &kp W         &kp V           &lt NUMPAD B  &sqt_dqt                                          &kp COLON     &kp P         &kp X         &kp Y         &kp Z
                         &kp TILDE     &kp SLASH                                                                                                   &kp COMMA     &kp DOT
                                                       &mt LALT TAB  &lt LOWER BSPC  &lt NUMBERS ESC           &kp RET    &lt_spc RAISE 0   &alt_dot RALT 0
)

ZMK_LAYER(numpad,
           &kp O         &kp C         &kp L           &kp D         &kp K                                             &kp J         &kp F         &kp O         &kp U         &kp SEMI
 &kp U     &kp R         &hml LGUI S   &hml LCTRL T    &hml LSHIFT H &kp G                                             &kp M         &hmr RSHIFT N &hmr RCTRL E  &hmr RGUI I   &kp A         &kp SQT
           &kp Q         &kp W         &kp V           &lt NUMPAD B  &sqt_dqt                                          &kp COLON     &kp P         &kp X         &kp Y         &kp Z
                         &kp TILDE     &kp SLASH                                                                                                   &kp COMMA     &kp DOT
                                                       &mt LALT TAB  &lt LOWER BSPC  &lt NUMBERS ESC           &kp RET    &lt_spc RAISE 0   &alt_dot RALT 0
)

ZMK_LAYER(numbers,
           &kp O         &kp C         &kp L           &kp D         &kp K                                             &kp J         &kp F         &kp O         &kp U         &kp SEMI
 &kp U     &kp R         &hml LGUI S   &hml LCTRL T    &hml LSHIFT H &kp G                                             &kp M         &hmr RSHIFT N &hmr RCTRL E  &hmr RGUI I   &kp A         &kp SQT
           &kp Q         &kp W         &kp V           &lt NUMPAD B  &sqt_dqt                                          &kp COLON     &kp P         &kp X         &kp Y         &kp Z
                         &kp TILDE     &kp SLASH                                                                                                   &kp COMMA     &kp DOT
                                                       &mt LALT TAB  &lt LOWER BSPC  &lt NUMBERS ESC           &kp RET    &lt_spc RAISE 0   &alt_dot RALT 0
)