#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_dactyl_manuform_4x6_resist.h"

#define BASE      0
#define LOWER     1
#define RAISE     2
#define EXTRAS    3
#define NUMPAD    4
#define NUMBERS   5
#define BLUETOOTH 6
#define LANG      7

// left-hand keys
#define KEYS_L LN0 LN1 LN2 LN3 LN4 LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LB0 LB1
// right-hand keys
#define KEYS_R RN0 RN1 RN2 RN3 RN4 RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RB0 RB1
// left-hand thumb keys
#define THUMBS_L LH0 LH1 LH2
// right-hand thumb keys
#define THUMBS_R RH0 RH1 RH2

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <EXTRAS>;
        };
    };
};


#define XXX &none
#define ___ &trans

#undef COMBO_TERM
#define COMBO_TERM 40


ZMK_COMBO(combo6, &kp DQT, LB0 LB1, 0)


#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <175>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
        hold-while-undecided; \
    )


//global-quick-tap-ms = <150>;

// left-hand HRMs
MAKE_HRM(hml, &kp, &kp, THUMBS_L THUMBS_R KEYS_R)
// right-hand HRMs
MAKE_HRM(hmr, &kp, &kp, THUMBS_L THUMBS_R KEYS_L)

&lt {
  tapping-term-ms = <280>;
  quick-tap-ms = <175>; // repeat on tap-into-hold
  flavor = "balanced";
};

&mt {
  tapping-term-ms = <280>;
  quick-tap-ms = <200>; // repeat on tap-into-hold
  flavor = "balanced";
};

// long-tap action on hold, short-tap action on all interrupts
// flavor = "tap-preferred";
// #define MT_CORE \
//     flavor = "balanced"; \
//     tapping-term-ms = <220>; \
//     quick-tap-ms = <220>; \
//     hold-trigger-key-positions = <0>;

// &mt { MT_CORE };

// ZMK_BEHAVIOR(mt_home, hold_tap, bindings = <&masked_home>, <&kp>; MT_CORE)
// ZMK_BEHAVIOR(mt_end,  hold_tap,  bindings = <&masked_end>, <&kp>; MT_CORE)

// #define NAV_LEFT  &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
// #define NAV_RIGHT &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
// #define NAV_UP    &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
// #define NAV_DOWN  &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document
// #define NAV_BSPC  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
// #define NAV_DEL   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

// mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
#define MASK_MODS(NAME, MODS, BINDING) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        bindings = <BINDING>, <BINDING>; \
        mods = <MODS>; \
    )
MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

// grave on shift single qoute
/ {
  behaviors {
    gsqt: grave_escape {
      compatible = "zmk,behavior-mod-morph";
      label = "GRAVE_ESCAPE";
      #binding-cells = <0>;
      bindings = <&kp SQT>, <&kp GRAVE>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
  };
};

// modify &sk to prevent double capital letters
/ {
  behaviors {
    skq: sticky_key_quick_release {
      compatible = "zmk,behavior-sticky-key";
      label = "STICKY_KEY_QUICK_RELEASE";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <5000>;
      quick-release;
    };
  };
  hltr: hold_layer_tap_repeat {
    label = "HOLD_LAYER_TAP_REPEAT";
    #binding-cells = <2>;
    compatible = "zmk,behavior-hold-tap";
    bindings = <&mo>, <&key_repeat>;
    tapping-term-ms = <120>;
    flavor = "tap-preferred";
  };
};

// ----------------------------
ZMK_BEHAVIOR(lt_spc, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
    bindings = <&mo>, <&spc_morph>;
)
ZMK_BEHAVIOR(spc_morph, mod_morph,
    bindings = <&kp SPACE>, <&dot_spc>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(dot_spc, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &skq LSHFT>;
)

// ZMK_BEHAVIOR(tmux, macro,
//     wait-ms = <0>;
//     tap-ms = <5>;
//     bindings = <&kp LCTL &kp B>;
// )
// ----------------------------
// ----------------------------
ZMK_BEHAVIOR(alt_dot, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    bindings = <&kp>, <&alt_morph>;
    hold-while-undecided;
)
ZMK_BEHAVIOR(alt_morph, mod_morph,
    bindings = <&kp DOT>, <&kp COMMA>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// ----------------------------
// ----------------------------
ZMK_BEHAVIOR(copy_cut, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp LC(INS)>, <&kp LC(X)>;
)

ZMK_BEHAVIOR(dot_comma, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp DOT>, <&kp COMMA>;
)

ZMK_BEHAVIOR(sqt_dqt, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp SQT>, <&kp DQT>;
)
// ----------------------------



// ZMK_LAYER(base,
//            XXX           &kp C         &kp L           &kp D         &kp K                                             &kp J            &kp F         &kp O         &kp U         &kp SEMI
//  &kp ESC   &kp R         &hml LGUI S   &hml LCTRL T    &hml LSHIFT H &kp G                                             &kp M            &hmr RSHIFT N &hmr RCTRL E  &hmr RGUI I   &kp A     &kp RET
//            &kp Q         &kp W         &kp V           &lt NUMPAD B  XXX                                               &kp COLON        &kp P         &kp X         &kp Y         &kp Z
//                          &kp GRAVE     &kp SQT                                                                                                        &kp COMMA     &kp DOT
//                                                        &mt LALT TAB  &lt LOWER BSPC  &lt NUMPAD DEL      &lt LANG MINUS      &lt_spc RAISE 0  &alt_dot RALT 0
// )

// ZMK_LAYER(base,
//             XXX           &kp C         &kp L           &kp D         &kp K                                             &kp J            &kp F         &kp O         &kp U         &kp SEMI
//  &kp ESC    &kp R         &hml LGUI S   &hml LCTRL T    &hml LSHIFT H &kp G                                             &kp M            &hmr RSHIFT N &hmr RCTRL E  &hmr RGUI I   &kp A     &kp RET
//             &kp Q         &kp W         &kp V           &lt NUMPAD B  &caps_word                                        &kp COLON        &kp P         &kp X         &kp Y         &kp Z
//                           &gsqt         &kp DQT                                                                                                        &kp COMMA     &kp DOT
//                                                         &mt LALT TAB  &lt LOWER BSPC  &hltr NUMPAD &key_repeat   &hltr LANG &key_repeat  &lt_spc RAISE 0  &alt_dot RALT 0
// )

// ZMK_LAYER(base,
//             XXX           &kp C         &kp L           &kp D         &kp K                                             &kp J            &kp F         &kp O         &kp U         &kp SEMI
//  &gsqt      &kp R         &hml LGUI S   &hml LCTRL T    &hml LSHIFT H &kp G                                             &kp M            &hmr RSHIFT N &hmr RCTRL E  &hmr RGUI I   &kp A     &dot_spc
//             &kp Q         &kp W         &kp V           &lt NUMPAD B  &gsqt                                             &kp COLON        &kp P         &kp X         &kp Y         &kp Z
//                           &kp GRAVE     &kp DQT                                                                                                        &kp COMMA     &kp DOT
//                                                         &mt LALT TAB  &lt LOWER BSPC  &lt NUMPAD ESC         &lt LANG RET  &lt RAISE SPC &alt_dot RALT 0
// )

ZMK_LAYER(base,
            &kp GRAVE     &kp C         &kp L           &kp D         &kp K                                             &kp J            &kp F         &kp O         &kp U         &kp SEMI
 &kp SQT    &kp R         &hml LGUI S   &hml LCTRL T    &hml LSHIFT H &kp G                                             &kp M            &hmr RSHIFT N &hmr RCTRL E  &hmr RGUI I   &kp A     &dot_spc
            &kp Q         &kp W         &kp V           &lt NUMPAD B  XXX                                               &kp COLON        &kp P         &kp X         &kp Y         &kp Z
                          &kp UNDERSCORE &kp MINUS                                                                                                     &kp COMMA     &kp DOT
                                                        &mt LALT TAB  &lt LOWER BSPC  &lt NUMPAD ESC         &lt LANG RET  &lt RAISE SPC &alt_dot RALT 0
)

ZMK_LAYER(lower,
                XXX           &kp K_VOL_DN  &kp K_MUTE      &kp K_VOL_UP  XXX                                               XXX              &kp HOME      XXX           &kp END       XXX
 &caps_word     &kp F2        &kp LGUI      &kp LCTRL       &kp LSHIFT    XXX                                               XXX              &kp LEFT      &kp UP        &kp RIGHT     XXX       XXX
                &kp LC(Z)     &kp LC(LS(Z)) &copy_cut       &kp LS(INS)   &kp DEL                                           XXX              &kp PG_UP     &kp DOWN      &kp PG_DN     &kp LC(SLASH)
                              ___           ___                                                                                                            ___           ___
                                                            ___           ___         ___                        ___        &lt RAISE MINUS         ___
)

ZMK_LAYER(raise,
           &kp EXCL      &kp AT        &kp HASH      &kp DOLLAR    &kp PERCENT                                         &kp CARET     &kp AMPS      &kp LPAR      &kp RPAR      &kp MINUS
 XXX       &kp DOT       &kp LT        &kp SLASH     &kp GT        XXX                                                 &kp PIPE      &kp ASTERISK  &kp LBRC      &kp RBRC      &kp PLUS      &kp QMARK
           &kp BACKSLASH &kp TILDE     XXX           XXX           XXX                                                 &kp XXX       XXX           &kp LBKT      &kp RBKT      &kp EQUAL
                         ___           ___                                                                                                         ___           ___
                                                    ___    &lt LOWER UNDERSCORE     ___                     ___         ___         ___
)

ZMK_LAYER(extras,
                XXX           XXX           XXX           XXX           XXX                                             &kp F13       &kp F7        &kp F8        &kp F9        &kp F10
  &mo BLUETOOTH XXX           XXX           XXX           XXX           XXX                                             &kp F14       &kp F4        &kp F5        &kp F6        &kp F11       XXX
                XXX           XXX           XXX           XXX           XXX                                             &kp F15       &kp F1        &kp F2        &kp F3        &kp F12
                              ___           ___                                                                                                     ___           ___
                                                            ___         XXX         ___                     ___         XXX         ___
)

ZMK_LAYER(numpad,
                XXX           &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  XXX                                             &kp KP_DIVIDE   &kp KP_N7   &kp KP_N8   &kp KP_N9   &kp KP_MINUS
  XXX           XXX           &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  XXX                                             &kp KP_MULTIPLY &kp KP_N4   &kp KP_N5   &kp KP_N6   &kp KP_PLUS       XXX
                &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  XXX                                             XXX             &kp KP_N1   &kp KP_N2   &kp KP_N3   &kp KP_EQUAL
                              &kp CAPSLOCK  &kp KP_NUMLOCK                                                                                          &kp COMMA   &kp KP_DOT
                                                            ___         ___         ___                     ___         &kp KP_N0     &kp KP_DOT
)

ZMK_LAYER(numbers,
                &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                                    &kp NUMBER_6    &kp NUMBER_7  &kp KP_N8   &kp NUMBER_9  &kp NUMBER_0
  XXX           XXX           &kp LGUI      &kp LCTRL     &kp LSHIFT    XXX                                             XXX             XXX           XXX         XXX           XXX           XXX
                XXX           XXX           XXX           XXX           XXX                                             XXX             XXX           XXX         XXX           XXX
                              ___           ___                                                                                                       XXX         XXX
                                                            ___         XXX         ___                     ___         XXX           XXX
)

ZMK_LAYER(bluetooth,
                &sys_reset    &bt BT_CLR    &out OUT_BLE  &out OUT_USB  &bootloader                                     &bootloader   XXX           XXX           XXX           &sys_reset
  XXX           XXX           &bt BT_SEL 4  &bt BT_SEL 5  XXX           XXX                                             XXX           XXX           XXX           XXX           XXX           XXX
                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  XXX                                             XXX           XXX           XXX           XXX           XXX
                              XXX           XXX                                                                                                     XXX           XXX
                                                            XXX         XXX         XXX                     XXX         XXX         XXX
)

ZMK_LAYER(lang,
                XXX           XXX           XXX           XXX           XXX                                             XXX           XXX           &kp RA(P)   &kp RA(Y)     XXX
  XXX           XXX           &kp RA(S)     XXX           XXX           XXX                                             XXX           XXX           &kp RA(L)   &kp RA(L)     &kp RA(Q)     XXX
                XXX           XXX           XXX           XXX           XXX                                             XXX           XXX           XXX         XXX           &kp RA(W)
                              ___           ___                                                                                                     XXX         XXX
                                                            ___         XXX         ___                     ___         XXX           XXX
)