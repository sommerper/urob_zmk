#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_dactyl_manuform_4x6.h"

#define BASE      0
#define QURE      1
#define LOWER     2
#define RAISE     3
#define EXTRAS    4
#define NUMPAD    5
#define NUMBERS   6
#define BLUETOOTH 7


// left-hand keys
#define KEYS_L LN0 LN1 LN2 LN3 LN4 LN5 LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1
// right-hand keys
#define KEYS_R RN0 RN1 RN2 RN3 RN4 RN5 RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1
// left-hand thumb keys
#define THUMBS_L LH4 LH3 LH2 LH1
// right-hand thumb keys
#define THUMBS_R RH0 RH1 RH2 RH3 RH4

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <EXTRAS>;
        };
    };
};


#define XXX &none
#define ___ &trans

#undef COMBO_TERM
#define COMBO_TERM 40

ZMK_COMBO(comboColon, &kp COLON, RM1 RM2, 0)
// ZMK_COMBO(comboSingleQuote, &kp SINGLE_QUOTE, RT1 RT2, 0)
// ZMK_COMBO(comboDoubleQuote, &kp DOUBLE_QUOTES,  RT2 RT3, 0)
// ZMK_COMBO(comboReturn, &kp RET, RH3 RT4, 0)

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <175>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
//global-quick-tap-ms = <150>;

// left-hand HRMs
MAKE_HRM(hml, &kp, &kp, THUMBS_L THUMBS_R KEYS_R)
// right-hand HRMs
MAKE_HRM(hmr, &kp, &kp, THUMBS_L THUMBS_R KEYS_L)

&lt {
  tapping-term-ms = <280>;
  quick-tap-ms = <175>; // repeat on tap-into-hold
  flavor = "balanced";
};

&mt {
  tapping-term-ms = <280>;
  quick-tap-ms = <200>; // repeat on tap-into-hold
  flavor = "balanced";
};

// long-tap action on hold, short-tap action on all interrupts
// flavor = "tap-preferred";
// #define MT_CORE \
//     flavor = "balanced"; \
//     tapping-term-ms = <220>; \
//     quick-tap-ms = <220>; \
//     hold-trigger-key-positions = <0>;

// &mt { MT_CORE };

// ZMK_BEHAVIOR(mt_home, hold_tap, bindings = <&masked_home>, <&kp>; MT_CORE)
// ZMK_BEHAVIOR(mt_end,  hold_tap,  bindings = <&masked_end>, <&kp>; MT_CORE)

// #define NAV_LEFT  &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
// #define NAV_RIGHT &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
// #define NAV_UP    &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
// #define NAV_DOWN  &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document
// #define NAV_BSPC  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
// #define NAV_DEL   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

// mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
#define MASK_MODS(NAME, MODS, BINDING) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        bindings = <BINDING>, <BINDING>; \
        mods = <MODS>; \
    )
MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

// ----------------------------
ZMK_BEHAVIOR(lt_spc, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
    bindings = <&mo>, <&spc_morph>;
)
ZMK_BEHAVIOR(spc_morph, mod_morph,
    bindings = <&kp SPACE>, <&dot_spc>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(dot_spc, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)

// ZMK_BEHAVIOR(tmux, macro,
//     wait-ms = <0>;
//     tap-ms = <5>;
//     bindings = <&kp LCTL &kp B>;
// )
// ----------------------------
// ----------------------------
ZMK_BEHAVIOR(alt_dot, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    bindings = <&kp>, <&alt_morph>;
)
ZMK_BEHAVIOR(alt_morph, mod_morph,
    bindings = <&kp DOT>, <&kp COMMA>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// ----------------------------
// ----------------------------
ZMK_BEHAVIOR(copy_cut, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp LC(INS)>, <&kp LC(X)>;
)

ZMK_BEHAVIOR(dot_comma, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp DOT>, <&kp COMMA>;
)

ZMK_BEHAVIOR(sqt_dqt, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp SQT>, <&kp DQT>;
)
// ----------------------------


ZMK_LAYER(base,
  XXX           XXX           &kp W         &kp F           &kp P         &kp B                                             &kp J         &kp L         &kp U         &kp Y         &kp SEMI      &kp GRAVE
  XXX           &kp A         &hml LGUI R   &hml LCTRL S    &hml LSHIFT T &kp G                                             &kp M         &hmr RSHIFT N &hmr RCTRL E  &hmr RGUI I   &kp O         &kp SQT
  &caps_word    &kp Z         &kp K         &kp C           &lt NUMPAD D  &sqt_dqt                                          &kp COLON     &kp H         &kp X         &kp V         &kp Q         &kp COLON
                              &kp TILDE     &kp SLASH                                                                                                   &kp COMMA     &kp DOT
                                                            &mt LALT TAB  &lt LOWER BSPC  &lt NUMPAD ESC            &kp RET    &lt_spc RAISE 0   &alt_dot RALT 0
                                                                  &kp DEL       &mo NUMBERS                                 XXX       &kp COLON
)

// ZMK_LAYER(base,
//   XXX           XXX           &kp W         &kp F           &kp P         &kp B                                             &kp J         &kp L         &kp U         &kp Y         &kp SEMI      &kp GRAVE
//   XXX           &kp A         &hml LGUI S   &hml LCTRL T    &hml LSHIFT H &kp G                                             &kp M         &hmr RSHIFT N &hmr RCTRL E  &hmr RGUI I   &kp O         &kp SQT
//   &caps_word    &kp Z         &kp C         &kp K           &lt NUMPAD D  &sqt_dqt                                          &kp COLON     &kp R         &kp X         &kp V         &kp Q         &kp COLON
//                               &kp TILDE     &kp SLASH                                                                                                   &kp COMMA     &kp DOT
//                                                             &mt LALT TAB  &lt LOWER BSPC  &lt NUMPAD ESC            &kp RET    &lt_spc RAISE 0   &alt_dot RALT 0
//                                                                   &kp DEL       &mo NUMBERS                                 XXX       &kp COLON
// )

// ZMK_LAYER(qure,
//   XXX           XXX           &kp W         &kp F           &kp P         &kp B                                             &kp X         &kp V         &kp K         &kp Y         &kp SEMI      &kp GRAVE
//   XXX           &kp R         &hml LGUI S   &hml LCTRL T    &hml LSHIFT H &kp G                                             &kp M         &hmr RSHIFT N &hmr RCTRL E  &hmr RGUI I   &kp A         &kp SQT
//   &caps_word    &kp Q         &kp C         &kp L           &lt NUMPAD D  &sqt_dqt                                          &kp COLON     &kp J         &kp U         &kp O         &kp Z         &kp COLON
//                               &kp TILDE     &kp SLASH                                                                                                   &kp COMMA     &kp DOT
//                                                             &mt LALT TAB  &lt LOWER BSPC  &lt NUMPAD ESC            &kp RET    &lt_spc RAISE 0   &alt_dot RALT 0
//                                                                   &kp DEL       &mo NUMBERS                                 XXX       &kp COLON
// )


// ZMK_LAYER(qure,
//   XXX           XXX           &kp W         &kp F           &kp P         &kp B                                             &kp J         &kp Y         &kp U         &kp O         &kp SEMI      &kp GRAVE
//   XXX           &kp R         &hml LGUI S   &hml LCTRL T    &hml LSHIFT H &kp G                                             &kp M         &hmr RSHIFT N &hmr RCTRL E  &hmr RGUI I   &kp A         &kp SQT
//   &caps_word    &kp Q         &kp C         &kp L           &lt NUMPAD D  &sqt_dqt                                          &kp COLON     &kp V         &kp X         &kp K         &kp Z         &kp COLON
//                               &kp TILDE     &kp SLASH                                                                                                   &kp COMMA     &kp DOT
//                                                             &mt LALT TAB  &lt LOWER BSPC  &lt NUMPAD ESC            &kp RET    &lt_spc RAISE 0   &alt_dot RALT 0
//                                                                   &kp DEL       &mo NUMBERS                                 XXX       &kp COLON
// )

ZMK_LAYER(qure,
  XXX           XXX           &kp C         &kp L           &kp D         &kp B                                             &kp J         &kp F         &kp O         &kp U         &kp SEMI      &kp GRAVE
  XXX           &kp R         &hml LGUI S   &hml LCTRL T    &hml LSHIFT H &kp G                                             &kp M         &hmr RSHIFT N &hmr RCTRL E  &hmr RGUI I   &kp A         &kp SQT
  &caps_word    &kp Q         &kp W         &kp V           &lt NUMPAD K  &sqt_dqt                                          &kp COLON     &kp P         &kp X         &kp Y         &kp Z         &kp COLON
                              &kp TILDE     &kp SLASH                                                                                                   &kp COMMA     &kp DOT
                                                            &mt LALT TAB  &lt LOWER BSPC  &lt NUMPAD ESC            &kp RET    &lt_spc RAISE 0   &alt_dot RALT 0
                                                                  &kp DEL       &mo NUMBERS                                 XXX       &kp COLON
)

// ZMK_LAYER(qure,
//   XXX           XXX           &kp L         &kp D           &kp W         &kp B                                             &kp J         &kp F         &kp U         &kp O         &kp SEMI      &kp GRAVE
//   XXX           &kp N         &hml LGUI R   &hml LCTRL S    &hml LSHIFT T &kp G                                             &kp Y         &hmr RSHIFT H &hmr RCTRL A  &hmr RGUI E   &kp I         &kp SQT
//   &caps_word    &kp Q         &kp X         &kp M           &lt NUMPAD C  &sqt_dqt                                          &kp COLON     &kp P         &kp X         &kp V         &kp Z         &kp COLON
//                               &kp TILDE     &kp SLASH                                                                                                   &kp COMMA     &kp DOT
//                                                             &mt LALT TAB  &lt LOWER BSPC  &lt NUMPAD ESC            &kp RET    &lt_spc RAISE 0   &alt_dot RALT 0
//                                                                   &kp DEL       &mo NUMBERS                                 XXX       &kp COLON
// )
//  ldwb jfou
// nrtsg yhaei
// qxmc   kpvz
// ZMK_LAYER(qure,
//   XXX           XXX           &kp C         &kp L           &kp D         &kp B                                             &kp J         &kp U         &kp O         &kp Y         &kp SEMI      &kp GRAVE
//   XXX           &kp R         &hml LGUI S   &hml LCTRL T    &hml LSHIFT H &kp G                                             &kp M         &hmr RSHIFT N &hmr RCTRL E  &hmr RGUI I   &kp A         &kp SQT
//   &caps_word    &kp Q         &kp W         &kp F           &lt NUMPAD P  XXX                                               &kp COLON     &kp V         &kp X         &kp K         &kp Z         &kp COLON
//                               &kp TILDE     &kp SLASH                                                                                                   &kp COMMA     &kp DOT
//                                                             &mt LALT TAB  &lt LOWER BSPC  &lt NUMPAD ESC                  &kp RET    &lt_spc RAISE 0   &alt_dot RALT 0
//                                                                   &kp DEL       &mo NUMBERS                                 XXX       &kp COLON
// )

ZMK_LAYER(lower,
  XXX           XXX           &kp K_VOL_DN  &kp K_MUTE    &kp K_VOL_UP  XXX                                                 XXX           &kp HOME      XXX           &kp END       XXX           XXX
  XXX           &kp ESC       &kp LGUI      &kp LCTRL     &kp LSHIFT    XXX                                                 XXX           &kp LEFT      &kp UP        &kp RIGHT     XXX           XXX
  &mo BLUETOOTH &kp LC(Z)     XXX           &copy_cut     &kp LS(INS)   XXX                                                 XXX           &kp PG_UP     &kp DOWN      &kp PG_DN     &kp LC(SLASH) XXX
                              ___           ___                                                                                                         ___           ___
                                                            ___         ___         ___                     ___    &lt RAISE MINUS         ___
                                                                  ___         ___                                 ___         ___
)

ZMK_LAYER(raise,
  XXX           &kp EXCL      &kp AT        &kp HASH      &kp DOLLAR    &kp PERCENT                                         &kp CARET     &kp AMPS      &kp LPAR      &kp RPAR      &kp MINUS     XXX
  XXX           &kp DOT       &kp LT        &kp SLASH     &kp GT        &kp QMARK                                           &kp PIPE      &kp ASTERISK  &kp LBRC      &kp RBRC      &kp PLUS      XXX
  XXX           &kp BACKSLASH &kp TILDE     &kp SEMI      &kp COLON     &kp DQT                                             &kp SQT       XXX           &kp LBKT      &kp RBKT      &kp EQUAL     &mo BLUETOOTH
                              ___           ___                                                                                                     ___           ___
                                                            ___    &lt LOWER UNDERSCORE     ___                     ___         ___         ___
                                                                  ___         ___                                 ___         ___
)

ZMK_LAYER(extras,
  XXX           XXX           XXX           &to BASE      &to QURE      XXX                                             &kp F13       &kp F7        &kp F8        &kp F9        &kp F10           XXX
  XXX           XXX           XXX           XXX           XXX           XXX                                             &kp F14       &kp F4        &kp F5        &kp F6        &kp F11           XXX
  XXX           XXX           XXX           XXX           XXX           XXX                                             &kp F15       &kp F1        &kp F2        &kp F3        &kp F12           XXX
                              ___           ___                                                                                                     ___           ___
                                                            ___         XXX         ___                     ___         XXX         ___
                                                                  XXX         XXX                                 XXX         XXX
)

ZMK_LAYER(numpad,
  XXX           XXX           XXX           XXX           XXX           XXX                                             &kp KP_DIVIDE   &kp KP_N7   &kp KP_N8   &kp KP_N9   &kp KP_MINUS          XXX
  XXX           XXX           XXX           XXX           XXX           XXX                                             &kp KP_MULTIPLY &kp KP_N4   &kp KP_N5   &kp KP_N6   &kp KP_PLUS           XXX
  XXX           XXX           &kp CAPSLOCK  &kp KP_NUMLOCK XXX          XXX                                             XXX             &kp KP_N1   &kp KP_N2   &kp KP_N3   &kp KP_EQUAL          XXX
                              ___           ___                                                                                                     &kp KP_N0   &dot_comma
                                                            ___         ___         ___                     ___         &kp KP_N0     &dot_comma
                                                                  XXX         XXX                                 XXX         XXX
)


ZMK_LAYER(numbers,
  XXX           &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                                    &kp NUMBER_6    &kp NUMBER_7  &kp KP_N8   &kp NUMBER_9  &kp NUMBER_0      XXX
  XXX           XXX           XXX           XXX           XXX           XXX                                             XXX             XXX           XXX         XXX           XXX               XXX
  XXX           XXX           XXX           XXX           XXX           XXX                                             XXX             XXX           XXX         XXX           XXX               XXX
                              ___           ___                                                                                                       XXX         XXX
                                                            ___         XXX         ___                     ___         XXX           XXX
                                                                  XXX         XXX                                 XXX         XXX
)

ZMK_LAYER(bluetooth,
  XXX           &sys_reset    &bt BT_CLR    &out OUT_BLE  &out OUT_USB  &bootloader                                     &bootloader   XXX           XXX           XXX           &sys_reset    XXX
  XXX           XXX           &bt BT_SEL 4  &bt BT_SEL 5  XXX           XXX                                             XXX           XXX           XXX           XXX           XXX           XXX
  XXX           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  XXX                                             XXX           XXX           XXX           XXX           XXX           XXX
                              XXX           XXX                                                                                                     XXX           XXX
                                                            XXX         XXX         XXX                     XXX         XXX         XXX
                                                                  XXX         XXX                                 XXX         XXX
)

